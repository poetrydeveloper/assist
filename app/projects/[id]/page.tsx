// app/projects/[id]/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { useParams, useRouter } from 'next/navigation'

interface Project {
  id: string
  title: string
  description: string | null
  goal: string
  steps: Step[]
}

interface Step {
  id: string
  content: string
  type: string | null
  aiResponse: string | null
  createdAt: string
}

export default function ProjectDetail() {
  const params = useParams()
  const router = useRouter()
  const [project, setProject] = useState<Project | null>(null)
  const [loading, setLoading] = useState(true)
  const [newStep, setNewStep] = useState('')
  const [addingStep, setAddingStep] = useState(false)
  const [editingStepId, setEditingStepId] = useState<string | null>(null)
  const [aiResponse, setAiResponse] = useState('')
  const [savingAiResponse, setSavingAiResponse] = useState(false)
  const [deletingStepId, setDeletingStepId] = useState<string | null>(null)

  const projectId = params.id as string

  useEffect(() => {
    if (projectId) {
      fetchProject()
    }
  }, [projectId])

  const fetchProject = async () => {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç:', projectId)
      const response = await fetch(`/api/projects/${projectId}`)
      
      if (!response.ok) {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ω–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, –∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º project –≤ null
        if (response.status === 404) {
          setProject(null)
          setLoading(false)
          return
        }
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      
      const data = await response.json()
      console.log('üì¶ –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–µ–∫—Ç:', data)
      setProject(data)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:', error)
      setProject(null)
    } finally {
      setLoading(false)
    }
  }

  const addStep = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!newStep.trim()) return

    setAddingStep(true)
    try {
      console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥:', newStep)
      const response = await fetch(`/api/projects/${projectId}/steps`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          content: newStep,
          type: 'note'
        }),
      })

      if (response.ok) {
        const newStepData = await response.json()
        console.log('‚úÖ –®–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω:', newStepData)
        setNewStep('')
        fetchProject() // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–≥–∞')
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —à–∞–≥')
      }
    } catch (error) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —à–∞–≥:', error)
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —à–∞–≥')
    } finally {
      setAddingStep(false)
    }
  }

  const exportSQL = () => {
    window.open(`/api/projects/${projectId}/export`, '_blank')
  }

  const saveAiResponse = async (stepId: string) => {
    if (!aiResponse.trim()) return

    setSavingAiResponse(true)
    try {
      const response = await fetch(`/api/steps/${stepId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          aiResponse: aiResponse.trim()
        }),
      })

      if (response.ok) {
        setEditingStepId(null)
        setAiResponse('')
        fetchProject() // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      } else {
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –ò–ò')
      }
    } catch (error) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –ò–ò:', error)
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –ò–ò')
    } finally {
      setSavingAiResponse(false)
    }
  }

  const startEditingAiResponse = (step: Step) => {
    setEditingStepId(step.id)
    setAiResponse(step.aiResponse || '')
  }

  const cancelEditing = () => {
    setEditingStepId(null)
    setAiResponse('')
  }

  const deleteStep = async (stepId: string) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥?')) {
      return
    }

    setDeletingStepId(stepId)
    try {
      const response = await fetch(`/api/steps/${stepId}`, {
        method: 'DELETE',
      })

      if (response.ok) {
        console.log('‚úÖ –®–∞–≥ —É–¥–∞–ª–µ–Ω')
        fetchProject() // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      } else {
        const error = await response.json()
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error)
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —à–∞–≥')
      }
    } catch (error) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —à–∞–≥:', error)
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —à–∞–≥')
    } finally {
      setDeletingStepId(null)
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 p-8">
        <div className="max-w-4xl mx-auto">
          <div className="text-center py-12">
            <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
            <p className="mt-4 text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç...</p>
          </div>
        </div>
      </div>
    )
  }

  if (!project) {
    return (
      <div className="min-h-screen bg-gray-50 p-8">
        <div className="max-w-4xl mx-auto">
          <div className="text-center py-12">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
            <p className="text-gray-600 mb-4">–ü—Ä–æ–µ–∫—Ç —Å ID "{projectId}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.</p>
            <button 
              onClick={() => router.push('/')}
              className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg transition-colors"
            >
              –ù–∞ –≥–ª–∞–≤–Ω—É—é
            </button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ */}
        <button 
          onClick={() => router.push('/')}
          className="flex items-center gap-2 text-gray-600 hover:text-gray-800 mb-6 transition-colors"
        >
          <span>‚Üê</span>
          –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º
        </button>

        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞ */}
        <div className="flex justify-between items-start mb-8">
          <div className="flex-1">
            <h1 className="text-3xl font-bold text-gray-900 mb-2">{project.title}</h1>
            {project.description && (
              <p className="text-gray-600 text-lg mb-3 whitespace-pre-wrap">{project.description}</p>
            )}
            <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
              <h3 className="font-semibold text-blue-900 mb-1">üéØ –¶–µ–ª—å –æ–±—É—á–µ–Ω–∏—è:</h3>
              <p className="text-blue-800">{project.goal}</p>
            </div>
          </div>
          <div className="flex-shrink-0 ml-6">
            <button
              onClick={exportSQL}
              className="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-lg font-semibold transition-colors whitespace-nowrap"
            >
              –≠–∫—Å–ø–æ—Ä—Ç SQL
            </button>
          </div>
        </div>

        {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–≥–∞ */}
        <div className="bg-white p-6 rounded-lg shadow-md border border-gray-200 mb-8">
          <h2 className="text-xl font-semibold mb-4">üìù –î–æ–±–∞–≤–∏—Ç—å —à–∞–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</h2>
          <form onSubmit={addStep}>
            <textarea
              value={newStep}
              onChange={(e) => setNewStep(e.target.value)}
              placeholder="–ß—Ç–æ –≤—ã —É–∑–Ω–∞–ª–∏? –ö–∞–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–¥–µ–ª–∞–ª–∏? –ö–∞–∫–∏–µ —É—Ä–æ–∫–∏ –ø—Ä–æ—à–ª–∏?"
              className="w-full px-3 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent mb-4 transition-colors"
              rows={4}
            />
            <div className="flex justify-between items-center">
              <button
                type="submit"
                disabled={addingStep || !newStep.trim()}
                className="bg-blue-500 hover:bg-blue-600 disabled:bg-gray-400 text-white px-6 py-2 rounded-lg font-semibold transition-colors"
              >
                {addingStep ? '–î–æ–±–∞–≤–ª—è–µ–º...' : '–î–æ–±–∞–≤–∏—Ç—å —à–∞–≥'}
              </button>
              <span className="text-sm text-gray-500">
                {newStep.length}/1000 —Å–∏–º–≤–æ–ª–æ–≤
              </span>
            </div>
          </form>
        </div>

        {/* –°–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ */}
        <div className="bg-white rounded-lg shadow-md border border-gray-200">
          <div className="p-6 border-b border-gray-200">
            <h2 className="text-xl font-semibold">üìä –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</h2>
            <p className="text-gray-600 text-sm mt-1">
              –í—Å–µ–≥–æ —à–∞–≥–æ–≤: {project.steps.length}
            </p>
          </div>
          
          {project.steps.length === 0 ? (
            <div className="p-8 text-center">
              <div className="text-6xl mb-4">üìù</div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">–ü–æ–∫–∞ –Ω–µ—Ç —à–∞–≥–æ–≤</h3>
              <p className="text-gray-600 mb-6">
                –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤–∞—à–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è! –§–∏–∫—Å–∏—Ä—É–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–≤–æ–π —Ä–æ—Å—Ç.
              </p>
            </div>
          ) : (
            <div className="divide-y divide-gray-200">
              {project.steps.map((step, index) => (
                <div key={step.id} className="p-6 hover:bg-gray-50 transition-colors group">
                  <div className="flex items-start gap-4">
                    <div className="flex-shrink-0 w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center text-white font-semibold">
                      {index + 1}
                    </div>
                    <div className="flex-1 min-w-0">
                      <div className="flex justify-between items-start mb-2">
                        <div className="flex items-center gap-2 flex-wrap">
                          <span className="text-sm text-gray-500 bg-gray-100 px-2 py-1 rounded">
                            {step.type || '–∑–∞–º–µ—Ç–∫–∞'}
                          </span>
                          {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–≥–∞ */}
                          <button
                            onClick={() => deleteStep(step.id)}
                            disabled={deletingStepId === step.id}
                            className="opacity-0 group-hover:opacity-100 transition-opacity text-red-500 hover:text-red-700 text-sm disabled:opacity-50"
                            title="–£–¥–∞–ª–∏—Ç—å —à–∞–≥"
                          >
                            {deletingStepId === step.id ? 'üóëÔ∏è –£–¥–∞–ª—è–µ–º...' : 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å'}
                          </button>
                        </div>
                        <span className="text-sm text-gray-500 whitespace-nowrap">
                          {new Date(step.createdAt).toLocaleDateString('ru-RU', {
                            day: 'numeric',
                            month: 'long',
                            year: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                          })}
                        </span>
                      </div>
                      <p className="text-gray-800 whitespace-pre-wrap leading-relaxed mb-4">
                        {step.content}
                      </p>

                      {/* –ë–õ–û–ö AI-–û–¢–í–ï–¢–ê */}
                      {step.aiResponse ? (
                        <div className="mt-4 p-4 bg-green-50 rounded-lg border border-green-200">
                          <div className="flex justify-between items-start mb-2">
                            <div className="flex items-center gap-2 text-green-800 font-semibold">
                              <span>ü§ñ</span>
                              <span>AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è</span>
                            </div>
                            <div className="flex gap-2">
                              <button
                                onClick={() => startEditingAiResponse(step)}
                                className="text-green-600 hover:text-green-800 text-sm transition-colors"
                              >
                                ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                              </button>
                            </div>
                          </div>
                          <p className="text-green-700 whitespace-pre-wrap text-sm">
                            {step.aiResponse}
                          </p>
                        </div>
                      ) : editingStepId === step.id ? (
                        // –§–û–†–ú–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø AI-–û–¢–í–ï–¢–ê
                        <div className="mt-4 p-4 bg-blue-50 rounded-lg border border-blue-200">
                          <h4 className="font-semibold text-blue-900 mb-2">
                            ü§ñ –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ò–ò
                          </h4>
                          <textarea
                            value={aiResponse}
                            onChange={(e) => setAiResponse(e.target.value)}
                            placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞..."
                            className="w-full px-3 py-2 border border-blue-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent mb-3 transition-colors"
                            rows={6}
                          />
                          <div className="flex gap-2">
                            <button
                              onClick={() => saveAiResponse(step.id)}
                              disabled={savingAiResponse || !aiResponse.trim()}
                              className="bg-blue-500 hover:bg-blue-600 disabled:bg-gray-400 text-white px-4 py-2 rounded text-sm transition-colors"
                            >
                              {savingAiResponse ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                            </button>
                            <button
                              onClick={cancelEditing}
                              className="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded text-sm transition-colors"
                            >
                              –û—Ç–º–µ–Ω–∞
                            </button>
                          </div>
                        </div>
                      ) : (
                        // –ö–ù–û–ü–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø AI-–û–¢–í–ï–¢–ê
                        <div className="mt-4">
                          <button
                            onClick={() => startEditingAiResponse(step)}
                            className="flex items-center gap-2 text-blue-600 hover:text-blue-800 text-sm font-medium transition-colors"
                          >
                            <span>ü§ñ</span>
                            <span>–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ò–ò</span>
                          </button>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* –ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø */}
        <div className="mt-8 bg-yellow-50 border border-yellow-200 rounded-lg p-6">
          <h3 className="font-semibold text-yellow-900 mb-2">üéØ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ò–ò:</h3>
          <ol className="text-yellow-800 text-sm space-y-2 list-decimal list-inside">
            <li>–ù–∞–∂–º–∏—Ç–µ "–≠–∫—Å–ø–æ—Ä—Ç SQL" –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å —Ç–µ–∫—Å—Ç</li>
            <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ò–ò (DeepSeek/ChatGPT) –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</li>
            <li>–í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞, –Ω–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ò–ò" –∫ –Ω—É–∂–Ω–æ–º—É —à–∞–≥—É</li>
            <li>–í—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –ò–ò –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ - –æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —à–∞–≥—É</li>
          </ol>
        </div>
      </div>
    </div>
  )
}